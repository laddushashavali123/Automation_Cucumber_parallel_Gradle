buildscript {
    repositories {
        jcenter()
    }
}
plugins {
    id "com.jfrog.bintray" version "1.8.0"
}

def ver = '1.1'
group 'com.in.automation.testing.util'
version ver

apply plugin: 'java'
apply plugin: 'findbugs'
apply plugin: 'jdepend'
apply plugin: 'pmd'
apply plugin: 'project-report'
apply plugin: 'build-dashboard'
apply plugin: 'jacoco'
apply plugin: 'maven'
apply plugin: 'maven-publish'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    compile group: 'info.cukes', name: 'cucumber-java8', version: '1.2.5'
    compile group: 'junit', name: 'junit', version: '4.12'
    compile group: 'com.aventstack', name: 'extentreports', version: '3.1.3'
    compile group: 'net.masterthought', name: 'cucumber-reporting', version: '3.13.0'
    testCompile group: 'info.cukes', name: 'cucumber-junit', version: '1.2.5'
    testCompile group: 'info.cukes', name: 'cucumber-picocontainer', version: '1.2.5'
    testCompile group: 'org.picocontainer', name: 'picocontainer', version: '2.15'
    testCompile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.11.0'
    testCompile group: 'org.testng', name: 'testng', version: '6.14.2'
    testCompile group: 'com.github.detro', name: 'ghostdriver', version: '2.1.0'
    testCompile group: 'com.github.mkolisnyk', name: 'cucumber-runner', version: '1.3.1'
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
    ignoreFailures = true
}

test {
    outputs.upToDateWhen { false }
    doFirst {
        File reportDir = new File("cucumber-parallel-execution-results")
        if (reportDir.exists()) {
            reportDir.deleteDir()
        }
    }
    useTestNG() {
        useDefaultListeners = true
        suites 'src/test/resources/testng.xml'
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

javadoc {
    failOnError = false
    source = sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "automation-testing-util"
        }
    }
    developers {
        developer {
            id "mrunalgosar"
            name "Mrunal Gosar"
            email "mrunalgosar@yahoo.in"
        }
    }

    scm {
        url "https://github.com/mrunalgosar/automation_testing_util.git"
    }
}

publishing {
    publications {
        CustomPublication(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId 'com.in.automation.testing.util'
            artifactId 'automation-testing-util'
            version ver
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'A collections of some utility classes and methods which can be used during automation testing.')
                root.appendNode('name', 'automation-testing-util')
                root.appendNode('url', 'https://github.com/mrunalgosar/automation_testing_util.git')
                root.children().last() + pomConfig
            }
        }
    }
}

bintray {
    def properties = new Properties()
    file('local.properties').withInputStream { properties.load(it) }
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")
    configurations = ['archives']
    publications = ['CustomPublication']
    pkg {
        repo = 'automation-testing-util'
        name = 'automation-testing-util' //YOUR PACKAGE NAME
        desc = 'A collections of some utility classes and methods which can be used during automation testing.'
        websiteUrl = 'https://github.com/mrunalgosar/automation_testing_util' // YOUR SITE
        vcsUrl = 'https://github.com/mrunalgosar/automation_testing_util.git' // YOUR GIT REPO
        version {
            name = ver
            desc = 'A collections of some utility classes and methods which can be used during automation testing.'
            vcsTag = ver
        }
        licenses = ["Apache-2.0"] // A LIST OF YOUR LICENCES
        publish = true
        publicDownloadNumbers = true
    }
}